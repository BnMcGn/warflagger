(in-package :warflagger)


;;FIXME: Might not be using any of this format-time-for-javascript stuff anymore...

(defgeneric js-compatible-utcstamp (date))

(defmethod js-compatible-utcstamp ((date local-time:timestamp))
  (let ((tformat '((:year 4) #\- (:month 2) #\- (:day 2) #\T
                   (:hour 2) #\: (:min 2) #\: (:sec 2) "+0000")))
    (local-time:format-timestring
     nil
     date
     :format tformat :timezone local-time:+utc-zone+)))

(defmethod js-compatible-utcstamp ((date integer))
  (js-compatible-utcstamp (local-time:universal-to-timestamp date)))

(defmethod js-compatible-utcstamp ((date clsql:wall-time))
  (js-compatible-utcstamp (clsql-helper:clsql-date/times->utime date)))

(defmethod json:encode-json ((object clsql-sys:wall-time) &optional stream)
  ;(write-char #\" stream)
  (write (js-compatible-utcstamp object) :stream stream)
  ;;FIXME: quick hack to make this work on the live server (GMT). Javascript is touchy
  ;; about parsing dates.
                                        ;(write-char #\" stream)
  )

(defmethod json:encode-json ((object local-time:timestamp) &optional stream)
  (write-char #\" stream)
  ;; FIXME: verify correct. Who uses local-time?
  (local-time:format-timestring
   stream object
   :format '((:year 4) #\- (:month 2) #\- (:day 2) #\T
             (:hour 2) #\: (:min 2) #\: (:sec 2) :gmt-offset-hhmm))
  (write-char #\" stream))


;;;;;;;;;;;;;;;;;;;;;;;;
;; Gather the opinion data
;;;;;;;;;;;;;;;;;;;;;;;;

(defun %fill-out-opinion-tree (tree text)
  (if (null tree)
      nil
      (let ((op (opinion-by-id (caar tree) :extra t :text text)))
        (cons
         (cons
          op
          (%fill-out-opinion-tree (cdar tree)
                                  (create-textdata
                                   (aif (assoc :comment op) (cdr it) ""))))
         (%fill-out-opinion-tree (cdr tree) text)))))

(defun request-warstats (url-or-iid &optional (cache (make-hash-table)))
  "First check the in memory cache for warstats, then check the disk storage, then create minimal default stats. Cache is of the format generated by reference-list-for-rooturl. Returned warstats are just for the requested entity, not for the whole tree."
  (or
   (cl-hash-util:hget cache (list url-or-iid :warstats))
   (wf/ipfs:ipfs-warstats url-or-iid)
   ;;Don't need a full warstats dict to seed the tree.
   (list :effect 1 :controversy 0)))

(defun get-headline-for-url (url)
  (multiple-value-bind (id type) (get-target-id-from-url url)
    (hu:collecting-hash-table (:mode :replace)
      (cond
        ((eq type :opinion)
         (let* ((opinion (opinion-by-id id))
                (comment (assoc-cdr :comment opinion)))
           (when comment
             (hu:collect :natural-title comment)
             (hu:collect :title comment))))
        ((eq type :rooturl)
         (when-let ((title (wf/ipfs:ipfs-extracted-title url)))
           (hu:collect :natural-title title)
           (hu:collect :title title)))
         ;;FIXME: Don't yet know what to do if reference isn't a target.
        (t nil)))))

(defun refd-opinion-data (opinion)
  (list*
   :refd-opinion-warstats (request-warstats (assoc-cdr :iid opinion))
   :refd-opinion-id (assoc-cdr :id opinion)
   :refd-opinion-iid (assoc-cdr :iid opinion)
   (when-let* ((excerpt (assoc-cdr :excerpt opinion))
               (text (get-target-text (assoc-cdr :id opinion)))
               (textpos (multiple-value-list
                         (find-excerpt-position
                          (create-textdata text) excerpt (or (assoc-cdr :excerpt-offset opinion) 0))))
               (index (elt textpos 0))
               (length (elt textpos 1))
               (econtext (excerpt-context text index length)))
     (list :refd-opinion-excerpt (getf econtext :excerpt)
           :refd-opinion-leading (getf econtext :leading)
           :refd-opinion-trailing (getf econtext :trailing)))))

(defun uri-domain (uri)
  (nth-value 2 (quri:parse-uri uri)))

(defun outgoing-reference-data (id)
  (let* ((refopin (opinion-by-id id))
         (refurl (assoc-cdr :reference refopin))
         (refd-opin (opinion-for-location refurl))
         (refroot (or (and refd-opin (get-rooturl-by-id (assoc-cdr :rooturl refd-opin))) refurl)))
    (assert (stringp refroot))
    `(:reference
      ,refurl
      :reference-domain ,(uri-domain refroot)
      :tree-address ,(tree-address id)
      :refbot ,(system-generated-p id)
      :refopinid ,id
      :refopiniid ,(assoc-cdr :iid refopin)
      :refopinurl ,(assoc-cdr :url refopin)
      :warstats ,(request-warstats refroot)
      :headline ,(get-headline-for-url refroot)
      ,@(when refd-opin
          (refd-opinion-data refd-opin)))))

;;Outgoing references
(defun reference-list-for-rooturl (rooturl)
  (ret res (make-hash-table)
    (dolist (id (reference-opinion-ids-for-rooturl rooturl))
      (setf (gethash id res) (hu:plist->hash (outgoing-reference-data id))))))

(defun question-opinion-p (opinid)
  (member (grab-one (liql opinid 'opinion 'opinion.flag))
          '("Negative RaiseQuestion" "Negative NeedsEvidence")
          :test #'equal))

